/* tslint:disable */
/* eslint-disable */
/**
 * Spark
 * Spark api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ChangePasswordDto
 */
export interface ChangePasswordDto {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordDto
     */
    'oldPassword': string;
}
/**
 * 
 * @export
 * @interface ChannelEntity
 */
export interface ChannelEntity {
    /**
     * 
     * @type {number}
     * @memberof ChannelEntity
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ChannelEntity
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ChannelEntity
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ChannelEntity
     */
    'avatar': string;
    /**
     * 
     * @type {Array<UserEntity>}
     * @memberof ChannelEntity
     */
    'members': Array<UserEntity>;
    /**
     * 
     * @type {Array<MessageEntity>}
     * @memberof ChannelEntity
     */
    'messages': Array<MessageEntity>;
}
/**
 * 
 * @export
 * @interface CreateChannelDto
 */
export interface CreateChannelDto {
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateChannelDto
     */
    'members': Array<number>;
}
/**
 * 
 * @export
 * @interface CreateLocalFileDto
 */
export interface CreateLocalFileDto {
    /**
     * 
     * @type {string}
     * @memberof CreateLocalFileDto
     */
    'filename': string;
    /**
     * 
     * @type {string}
     * @memberof CreateLocalFileDto
     */
    'path': string;
    /**
     * 
     * @type {string}
     * @memberof CreateLocalFileDto
     */
    'mimetype': string;
}
/**
 * 
 * @export
 * @interface CreateMessageDto
 */
export interface CreateMessageDto {
    /**
     * 
     * @type {number}
     * @memberof CreateMessageDto
     */
    'channelId': number;
    /**
     * 
     * @type {number}
     * @memberof CreateMessageDto
     */
    'ownerId': number;
    /**
     * 
     * @type {string}
     * @memberof CreateMessageDto
     */
    'text': string;
}
/**
 * 
 * @export
 * @interface LocalFileEntity
 */
export interface LocalFileEntity {
    /**
     * 
     * @type {number}
     * @memberof LocalFileEntity
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof LocalFileEntity
     */
    'filename': string;
    /**
     * 
     * @type {string}
     * @memberof LocalFileEntity
     */
    'path': string;
    /**
     * 
     * @type {string}
     * @memberof LocalFileEntity
     */
    'mimetype': string;
}
/**
 * 
 * @export
 * @interface LoginDto
 */
export interface LoginDto {
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface MessageEntity
 */
export interface MessageEntity {
    /**
     * 
     * @type {number}
     * @memberof MessageEntity
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof MessageEntity
     */
    'text': string;
    /**
     * 
     * @type {ChannelEntity}
     * @memberof MessageEntity
     */
    'channel': ChannelEntity;
    /**
     * 
     * @type {UserEntity}
     * @memberof MessageEntity
     */
    'owner': UserEntity;
    /**
     * 
     * @type {string}
     * @memberof MessageEntity
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof MessageEntity
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface RegisterDto
 */
export interface RegisterDto {
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    'nickname': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ResponseRegisterDto
 */
export interface ResponseRegisterDto {
    /**
     * 
     * @type {string}
     * @memberof ResponseRegisterDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseRegisterDto
     */
    'nickname': string;
    /**
     * 
     * @type {number}
     * @memberof ResponseRegisterDto
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface UpdateMessageDto
 */
export interface UpdateMessageDto {
    /**
     * 
     * @type {number}
     * @memberof UpdateMessageDto
     */
    'channelId'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateMessageDto
     */
    'ownerId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateMessageDto
     */
    'text'?: string;
}
/**
 * 
 * @export
 * @interface UpdateNicknameDto
 */
export interface UpdateNicknameDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateNicknameDto
     */
    'nickname': string;
}
/**
 * 
 * @export
 * @interface UserEntity
 */
export interface UserEntity {
    /**
     * 
     * @type {number}
     * @memberof UserEntity
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof UserEntity
     */
    'nickname': string;
    /**
     * 
     * @type {string}
     * @memberof UserEntity
     */
    'email': string;
    /**
     * 
     * @type {LocalFileEntity}
     * @memberof UserEntity
     */
    'avatar'?: LocalFileEntity;
    /**
     * 
     * @type {number}
     * @memberof UserEntity
     */
    'avatarId'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserEntity
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof UserEntity
     */
    'password': string;
    /**
     * 
     * @type {Array<UserEntity>}
     * @memberof UserEntity
     */
    'friends'?: Array<UserEntity>;
    /**
     * 
     * @type {Array<MessageEntity>}
     * @memberof UserEntity
     */
    'messages'?: Array<MessageEntity>;
    /**
     * 
     * @type {Array<ChannelEntity>}
     * @memberof UserEntity
     */
    'channels'?: Array<ChannelEntity>;
}

/**
 * AuthClient - axios parameter creator
 * @export
 */
export const AuthClientAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ChangePasswordDto} changePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerChangePassword: async (changePasswordDto: ChangePasswordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changePasswordDto' is not null or undefined
            assertParamExists('authControllerChangePassword', 'changePasswordDto', changePasswordDto)
            const localVarPath = `/api/auth/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCheckRefreshToken: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (loginDto: LoginDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginDto' is not null or undefined
            assertParamExists('authControllerLogin', 'loginDto', loginDto)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterDto} registerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister: async (registerDto: RegisterDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerDto' is not null or undefined
            assertParamExists('authControllerRegister', 'registerDto', registerDto)
            const localVarPath = `/api/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthClient - functional programming interface
 * @export
 */
export const AuthClientFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthClientAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ChangePasswordDto} changePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerChangePassword(changePasswordDto: ChangePasswordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerChangePassword(changePasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerCheckRefreshToken(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerCheckRefreshToken(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(loginDto: LoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(loginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterDto} registerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerRegister(registerDto: RegisterDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseRegisterDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerRegister(registerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthClient - factory interface
 * @export
 */
export const AuthClientFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthClientFp(configuration)
    return {
        /**
         * 
         * @param {ChangePasswordDto} changePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerChangePassword(changePasswordDto: ChangePasswordDto, options?: any): AxiosPromise<void> {
            return localVarFp.authControllerChangePassword(changePasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCheckRefreshToken(options?: any): AxiosPromise<void> {
            return localVarFp.authControllerCheckRefreshToken(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(loginDto: LoginDto, options?: any): AxiosPromise<UserEntity> {
            return localVarFp.authControllerLogin(loginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterDto} registerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister(registerDto: RegisterDto, options?: any): AxiosPromise<ResponseRegisterDto> {
            return localVarFp.authControllerRegister(registerDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthClient - object-oriented interface
 * @export
 * @class AuthClient
 * @extends {BaseAPI}
 */
export class AuthClient extends BaseAPI {
    /**
     * 
     * @param {ChangePasswordDto} changePasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthClient
     */
    public authControllerChangePassword(changePasswordDto: ChangePasswordDto, options?: AxiosRequestConfig) {
        return AuthClientFp(this.configuration).authControllerChangePassword(changePasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthClient
     */
    public authControllerCheckRefreshToken(options?: AxiosRequestConfig) {
        return AuthClientFp(this.configuration).authControllerCheckRefreshToken(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginDto} loginDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthClient
     */
    public authControllerLogin(loginDto: LoginDto, options?: AxiosRequestConfig) {
        return AuthClientFp(this.configuration).authControllerLogin(loginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterDto} registerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthClient
     */
    public authControllerRegister(registerDto: RegisterDto, options?: AxiosRequestConfig) {
        return AuthClientFp(this.configuration).authControllerRegister(registerDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ChannelClient - axios parameter creator
 * @export
 */
export const ChannelClientAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateChannelDto} createChannelDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelControllerCreate: async (createChannelDto: CreateChannelDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createChannelDto' is not null or undefined
            assertParamExists('channelControllerCreate', 'createChannelDto', createChannelDto)
            const localVarPath = `/api/channel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createChannelDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelControllerGetChannelById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('channelControllerGetChannelById', 'id', id)
            const localVarPath = `/api/channel/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChannelClient - functional programming interface
 * @export
 */
export const ChannelClientFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChannelClientAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateChannelDto} createChannelDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelControllerCreate(createChannelDto: CreateChannelDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelControllerCreate(createChannelDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async channelControllerGetChannelById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.channelControllerGetChannelById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChannelClient - factory interface
 * @export
 */
export const ChannelClientFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChannelClientFp(configuration)
    return {
        /**
         * 
         * @param {CreateChannelDto} createChannelDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelControllerCreate(createChannelDto: CreateChannelDto, options?: any): AxiosPromise<ChannelEntity> {
            return localVarFp.channelControllerCreate(createChannelDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelControllerGetChannelById(id: string, options?: any): AxiosPromise<ChannelEntity> {
            return localVarFp.channelControllerGetChannelById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChannelClient - object-oriented interface
 * @export
 * @class ChannelClient
 * @extends {BaseAPI}
 */
export class ChannelClient extends BaseAPI {
    /**
     * 
     * @param {CreateChannelDto} createChannelDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelClient
     */
    public channelControllerCreate(createChannelDto: CreateChannelDto, options?: AxiosRequestConfig) {
        return ChannelClientFp(this.configuration).channelControllerCreate(createChannelDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelClient
     */
    public channelControllerGetChannelById(id: string, options?: AxiosRequestConfig) {
        return ChannelClientFp(this.configuration).channelControllerGetChannelById(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LocalFileClient - axios parameter creator
 * @export
 */
export const LocalFileClientAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateLocalFileDto} createLocalFileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localFileControllerCreate: async (createLocalFileDto: CreateLocalFileDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createLocalFileDto' is not null or undefined
            assertParamExists('localFileControllerCreate', 'createLocalFileDto', createLocalFileDto)
            const localVarPath = `/api/local-file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createLocalFileDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localFileControllerGetFileById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('localFileControllerGetFileById', 'id', id)
            const localVarPath = `/api/local-file/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocalFileClient - functional programming interface
 * @export
 */
export const LocalFileClientFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocalFileClientAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateLocalFileDto} createLocalFileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async localFileControllerCreate(createLocalFileDto: CreateLocalFileDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.localFileControllerCreate(createLocalFileDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async localFileControllerGetFileById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.localFileControllerGetFileById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocalFileClient - factory interface
 * @export
 */
export const LocalFileClientFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocalFileClientFp(configuration)
    return {
        /**
         * 
         * @param {CreateLocalFileDto} createLocalFileDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localFileControllerCreate(createLocalFileDto: CreateLocalFileDto, options?: any): AxiosPromise<object> {
            return localVarFp.localFileControllerCreate(createLocalFileDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localFileControllerGetFileById(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.localFileControllerGetFileById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LocalFileClient - object-oriented interface
 * @export
 * @class LocalFileClient
 * @extends {BaseAPI}
 */
export class LocalFileClient extends BaseAPI {
    /**
     * 
     * @param {CreateLocalFileDto} createLocalFileDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalFileClient
     */
    public localFileControllerCreate(createLocalFileDto: CreateLocalFileDto, options?: AxiosRequestConfig) {
        return LocalFileClientFp(this.configuration).localFileControllerCreate(createLocalFileDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalFileClient
     */
    public localFileControllerGetFileById(id: number, options?: AxiosRequestConfig) {
        return LocalFileClientFp(this.configuration).localFileControllerGetFileById(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MessageClient - axios parameter creator
 * @export
 */
export const MessageClientAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateMessageDto} createMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messageControllerCreate: async (createMessageDto: CreateMessageDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMessageDto' is not null or undefined
            assertParamExists('messageControllerCreate', 'createMessageDto', createMessageDto)
            const localVarPath = `/api/message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMessageDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messageControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messageControllerFindByChannelId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('messageControllerFindByChannelId', 'id', id)
            const localVarPath = `/api/message/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messageControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('messageControllerRemove', 'id', id)
            const localVarPath = `/api/message/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateMessageDto} updateMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messageControllerUpdate: async (id: string, updateMessageDto: UpdateMessageDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('messageControllerUpdate', 'id', id)
            // verify required parameter 'updateMessageDto' is not null or undefined
            assertParamExists('messageControllerUpdate', 'updateMessageDto', updateMessageDto)
            const localVarPath = `/api/message/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateMessageDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageClient - functional programming interface
 * @export
 */
export const MessageClientFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessageClientAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateMessageDto} createMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async messageControllerCreate(createMessageDto: CreateMessageDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.messageControllerCreate(createMessageDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async messageControllerFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.messageControllerFindAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async messageControllerFindByChannelId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MessageEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.messageControllerFindByChannelId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async messageControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.messageControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateMessageDto} updateMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async messageControllerUpdate(id: string, updateMessageDto: UpdateMessageDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.messageControllerUpdate(id, updateMessageDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MessageClient - factory interface
 * @export
 */
export const MessageClientFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessageClientFp(configuration)
    return {
        /**
         * 
         * @param {CreateMessageDto} createMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messageControllerCreate(createMessageDto: CreateMessageDto, options?: any): AxiosPromise<object> {
            return localVarFp.messageControllerCreate(createMessageDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messageControllerFindAll(options?: any): AxiosPromise<string> {
            return localVarFp.messageControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messageControllerFindByChannelId(id: string, options?: any): AxiosPromise<Array<MessageEntity>> {
            return localVarFp.messageControllerFindByChannelId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messageControllerRemove(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.messageControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateMessageDto} updateMessageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messageControllerUpdate(id: string, updateMessageDto: UpdateMessageDto, options?: any): AxiosPromise<string> {
            return localVarFp.messageControllerUpdate(id, updateMessageDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessageClient - object-oriented interface
 * @export
 * @class MessageClient
 * @extends {BaseAPI}
 */
export class MessageClient extends BaseAPI {
    /**
     * 
     * @param {CreateMessageDto} createMessageDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageClient
     */
    public messageControllerCreate(createMessageDto: CreateMessageDto, options?: AxiosRequestConfig) {
        return MessageClientFp(this.configuration).messageControllerCreate(createMessageDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageClient
     */
    public messageControllerFindAll(options?: AxiosRequestConfig) {
        return MessageClientFp(this.configuration).messageControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageClient
     */
    public messageControllerFindByChannelId(id: string, options?: AxiosRequestConfig) {
        return MessageClientFp(this.configuration).messageControllerFindByChannelId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageClient
     */
    public messageControllerRemove(id: string, options?: AxiosRequestConfig) {
        return MessageClientFp(this.configuration).messageControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateMessageDto} updateMessageDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageClient
     */
    public messageControllerUpdate(id: string, updateMessageDto: UpdateMessageDto, options?: AxiosRequestConfig) {
        return MessageClientFp(this.configuration).messageControllerUpdate(id, updateMessageDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserClient - axios parameter creator
 * @export
 */
export const UserClientAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerAddAvatar: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/avatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateNicknameDto} updateNicknameDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerChangeUserNickname: async (updateNicknameDto: UpdateNicknameDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateNicknameDto' is not null or undefined
            assertParamExists('userControllerChangeUserNickname', 'updateNicknameDto', updateNicknameDto)
            const localVarPath = `/api/user/nickname`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateNicknameDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetAllUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetCurrent: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserClient - functional programming interface
 * @export
 */
export const UserClientFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserClientAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerAddAvatar(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerAddAvatar(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateNicknameDto} updateNicknameDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerChangeUserNickname(updateNicknameDto: UpdateNicknameDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerChangeUserNickname(updateNicknameDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerGetAllUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserEntity>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetAllUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerGetCurrent(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetCurrent(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserClient - factory interface
 * @export
 */
export const UserClientFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserClientFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerAddAvatar(options?: any): AxiosPromise<UserEntity> {
            return localVarFp.userControllerAddAvatar(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateNicknameDto} updateNicknameDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerChangeUserNickname(updateNicknameDto: UpdateNicknameDto, options?: any): AxiosPromise<UserEntity> {
            return localVarFp.userControllerChangeUserNickname(updateNicknameDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetAllUsers(options?: any): AxiosPromise<Array<UserEntity>> {
            return localVarFp.userControllerGetAllUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetCurrent(options?: any): AxiosPromise<UserEntity> {
            return localVarFp.userControllerGetCurrent(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserClient - object-oriented interface
 * @export
 * @class UserClient
 * @extends {BaseAPI}
 */
export class UserClient extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserClient
     */
    public userControllerAddAvatar(options?: AxiosRequestConfig) {
        return UserClientFp(this.configuration).userControllerAddAvatar(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateNicknameDto} updateNicknameDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserClient
     */
    public userControllerChangeUserNickname(updateNicknameDto: UpdateNicknameDto, options?: AxiosRequestConfig) {
        return UserClientFp(this.configuration).userControllerChangeUserNickname(updateNicknameDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserClient
     */
    public userControllerGetAllUsers(options?: AxiosRequestConfig) {
        return UserClientFp(this.configuration).userControllerGetAllUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserClient
     */
    public userControllerGetCurrent(options?: AxiosRequestConfig) {
        return UserClientFp(this.configuration).userControllerGetCurrent(options).then((request) => request(this.axios, this.basePath));
    }
}


